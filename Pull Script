local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Debris = game:GetService("Debris")
local RunService = game:GetService("RunService")
local ContentProvider = game:GetService("ContentProvider")
local pullEvent = ReplicatedStorage:WaitForChild("pullAbility")
local knockbackStrength = 150

-- Animations
local pullAnim = Instance.new("Animation")
pullAnim.AnimationId = "rbxassetid://121273754785371"

local comboAnim = Instance.new("Animation")
comboAnim.AnimationId = "rbxassetid://100397897638997"

local enemyAnim = Instance.new("Animation")
enemyAnim.AnimationId = "rbxassetid://107247304560127"

-- Preload animations
ContentProvider:PreloadAsync({pullAnim, comboAnim, enemyAnim})

-- Settings
local pullRadius = 40
local pullDuration = 1
local pullDistance = 5
local spacing = 2

pullEvent.OnServerEvent:Connect(function(player)
	local char = player.Character
	if not char then return end

	local root = char:FindFirstChild("HumanoidRootPart")
	local hum = char:FindFirstChildOfClass("Humanoid")
	local animator = hum and hum:FindFirstChildOfClass("Animator")
	if not root or not hum or not animator then return end

	-- Step 1: Play pull/startup animation
	local pullTrack = animator:LoadAnimation(pullAnim)
	pullTrack:Play()

	-- Optional VFX
	local vfxTemplate = ReplicatedStorage:FindFirstChild("pullVfx") and ReplicatedStorage.pullVfx:FindFirstChild("Part")
	if vfxTemplate then
		local vfx = vfxTemplate:Clone()
		vfx.CFrame = root.CFrame
		vfx.Anchored = true
		vfx.Parent = char
		Debris:AddItem(vfx, 1)
	end

	-- Step 2: Collect targets within radius
	local targets = {}
	for _, plr in pairs(game.Players:GetPlayers()) do
		if plr ~= player and plr.Character then
			local otherChar = plr.Character
			local otherRoot = otherChar:FindFirstChild("HumanoidRootPart")
			local otherHum = otherChar:FindFirstChildOfClass("Humanoid")
			local enemyAnimator = otherHum and otherHum:FindFirstChildOfClass("Animator")

			if otherRoot and otherHum and enemyAnimator and otherHum.Health > 0 then
				local dist = (otherRoot.Position - root.Position).Magnitude
				if dist <= pullRadius then
					table.insert(targets, {
						char = otherChar,
						root = otherRoot,
						hum = otherHum,
						animator = enemyAnimator,
					})
				end
			end
		end
	end

	-- Step 3: Teleport enemies in front, anchor them
	for i, target in ipairs(targets) do
		local otherRoot = target.root
		local forwardVector = root.CFrame.LookVector
		local rightVector = root.CFrame.RightVector
		local offset = rightVector * ((i - 1) * spacing - ((#targets - 1) * spacing) / 2)
		local targetPosition = root.Position + forwardVector * pullDistance + offset

		otherRoot.CFrame = CFrame.new(targetPosition, root.Position)
		otherRoot.Anchored = true

		task.delay(pullDuration, function()
			if otherRoot then
				otherRoot.Anchored = false
			end
		end)
	end

	-- Step 4: Wait for enemies to settle
	task.wait(0.2)

	-- Step 5: Play combo animation on player
	local comboTrack = animator:LoadAnimation(comboAnim)
	ContentProvider:PreloadAsync({comboTrack})
	comboTrack:Play()

	-- Marker signals for lighting/highlight effects
	local function setupMarker(markerName, fillColor, outlineColor, if1Enabled, if2Enabled)
		comboTrack:GetMarkerReachedSignal(markerName):Connect(function()
			local lightingService = game:GetService("Lighting")
			local if1 = lightingService:FindFirstChild('IF1')
			local if2 = lightingService:FindFirstChild('IF2')

			if if1 then if1.Enabled = if1Enabled end
			if if2 then if2.Enabled = if2Enabled end

			local charHighlight = Instance.new('Highlight')
			charHighlight.Parent = char
			charHighlight.FillTransparency = 0
			charHighlight.FillColor = fillColor
			charHighlight.OutlineColor = outlineColor
		end)
	end

	setupMarker("Hit", Color3.new(0,0,0), Color3.new(0,0,0), true, false)
	setupMarker("Hit2", Color3.new(1,1,1), Color3.new(1,1,1), false, true)
	setupMarker("Hit3", Color3.new(0,0,0), Color3.new(0,0,0), true, false)
	setupMarker("HitEnd", Color3.new(0,0,0), Color3.new(0,0,0), false, false)

	-- Step 6: Play enemy hit reactions
	for _, target in ipairs(targets) do
		local enemyTrack = target.animator:LoadAnimation(enemyAnim)
		enemyTrack:Play()
	end

	-- Step 7: Apply timed damage and knockback
	task.wait(0.4) -- First hit
	for _, target in ipairs(targets) do
		if target.hum and target.hum.Health > 0 then
			target.hum:TakeDamage(10)
		end
	end

	task.wait(0.6) -- Second hit
	for _, target in ipairs(targets) do
		if target.hum and target.hum.Health > 0 then
			target.hum:TakeDamage(10)
		end
	end

	task.wait(0.6) -- Third hit
	for _, target in ipairs(targets) do
		if target.hum and target.hum.Health > 0 then
			target.hum:TakeDamage(20)
			local direction = (target.root.Position - root.Position).Unit
			target.root.Velocity = direction * knockbackStrength
		end
	end
end)
